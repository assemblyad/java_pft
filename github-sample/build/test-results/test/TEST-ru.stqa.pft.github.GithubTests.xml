<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ru.stqa.pft.github.GithubTests" tests="1" skipped="0" failures="0" errors="0" timestamp="2020-10-23T15:15:23" hostname="ADEMIDIONOK-LT" time="47.271">
  <properties/>
  <testcase name="testCommits" classname="ru.stqa.pft.github.GithubTests" time="47.271"/>
  <system-out><![CDATA[Задание №20: Реализовать интеграцию тестов с баг-трекером Bugify

Представьте себе, что баг-репорты для тестируемой системы хранятся в баг-трекере Bugify. Некоторые автотесты невозможно выполнить из-за наличия багов в тестируемой системе. До тех пор, пока баг не исправлен, тест выполнять нет смысла, он должен быть отключен. Но как только статус баг-репорта меняется -- тест должен автоматически активироваться. Необходимо реализовать такую интеграцию тестов с баг-трекером.

Для этого нужно сделать следующее:

1) В классе TestBase, от которого наследуются все тесты, необходимо реализовать функцию boolean isIssueOpen(int issueId) , которая должна через Remote API получать из баг-трекера информацию о баг-репорте с заданным идентификатором, и возвращать значение false или true в зависимости от того, помечен он как исправленный или нет.

2) Туда же в TestBase необходимо добавить такую функцию:

public void skipIfNotFixed(int issueId) {
  if (isIssueOpen(issueId)) {
    throw new SkipException("Ignored because of issue " + issueId)
  }
}

и вызывать её в начале нужного теста, чтобы он пропускался, если баг ещё не исправлен.

Посмотреть список доступных функций/запросов можно здесь: https://bugify.com/api

А тесты нужно нацеливать на вот эту инсталляцию Bugify: https://bugify.stqa.ru/api, для доступа использовать API Key 288f44776e7bec4bf44fdfeb1e646490
Задание №20: Реализовать интеграцию тестов с баг-трекером Bugify

Задание №20: Реализовать интеграцию тестов с баг-трекером Bugify
Представьте себе, что баг-репорты для тестируемой системы хранятся в баг-трекере Bugify. Некоторые автотесты невозможно выполнить из-за наличия багов в тестируемой системе. До тех пор, пока баг не исправлен, тест выполнять нет смысла, он должен быть отключен. Но как только статус баг-репорта меняется -- тест должен автоматически активироваться. Необходимо реализовать такую интеграцию тестов с баг-трекером.

Для этого нужно сделать следующее:

1) В классе TestBase, от которого наследуются все тесты, необходимо реализовать функцию boolean isIssueOpen(int issueId) , которая должна через Remote API получать из баг-трекера информацию о баг-репорте с заданным идентификатором, и возвращать значение false или true в зависимости от того, помечен он как исправленный или нет.

2) Туда же в TestBase необходимо добавить такую функцию:

public void skipIfNotFixed(int issueId) {
  if (isIssueOpen(issueId)) {
    throw new SkipException("Ignored because of issue " + issueId)
  }
}

и вызывать её в начале нужного теста, чтобы он пропускался, если баг ещё не исправлен.

Посмотреть список доступных функций/запросов можно здесь: https://bugify.com/api

А тесты нужно нацеливать на вот эту инсталляцию Bugify: https://bugify.stqa.ru/api, для доступа использовать API Key 288f44776e7bec4bf44fdfeb1e646490
Quation regarding Лекция 9.4

please check why assert fails though required methods added.
Задание №19: Реализовать интеграцию тестов с баг-трекером MantisBT

Представьте себе, что баг-репорты для тестируемой системы хранятся в баг-трекере MantisBT. Некоторые автотесты невозможно выполнить из-за наличия багов в тестируемой системе. До тех пор, пока баг не исправлен, тест выполнять нет смысла, он должен быть отключен. Но как только статус баг-репорта меняется -- тест должен автоматически активироваться. Необходимо реализовать такую интеграцию тестов с баг-трекером.

Для этого нужно сделать следующее:

1) В классе TestBase, от которого наследуются все тесты, необходимо реализовать функцию boolean isIssueOpen(int issueId) , которая должна через Remote API получать из баг-трекера информацию о баг-репорте с заданным идентификатором, и возвращать значение false или true в зависимости от того, помечен он как исправленный или нет.

2) Туда же в TestBase необходимо добавить такую функцию:

public void skipIfNotFixed(int issueId) {
  if (isIssueOpen(issueId)) {
    throw new SkipException("Ignored because of issue " + issueId)
  }
}

и вызывать её в начале нужного теста, чтобы он пропускался, если баг ещё не исправлен.
Задание №18: Реализовать тест для смены пароля в MantisBT

Реализовать сценарий смены пароля пользователю баг-трекера MantisBT администратором системы:

Администратор входит в систему, переходит на страницу управления пользователями, выбирает заданного пользователя и нажимает кнопку Reset Password
Отправляется письмо на адрес пользователя, тесты должны получить это письмо, извлечь из него ссылку для смены пароля, пройти по этой ссылке и изменить пароль.
Затем тесты должны проверить, что пользователь может войти в систему с новым паролем.
Изменить конфигурацию MantisBT можно вручную, не обязательно подменять конфигурационный файл при запуске тестов. Пользователя тоже можно заранее создать вручную.

Однако получить информацию об идентификаторе и/или логине пользователя тесты должны самостоятельно во время выполнения. Можно это сделать, например, загрузив информацию о пользователях из базы данных.

Почтовый сервер можно запускать непосредственно внутри тестов.

Шаги 1 и 2 необходимо выполнять через пользовательский интерфейс, а шаг 3 можно выполнить на уровне протокола HTTP.

---
Opened quetion regarding : Лекция 8.7. Получение почты на внешний почтовый сервер. Создание пользователей на внешнем почтовом сервере (по протоколу Telnet)

Лекция 8.7. Получение почты на внешний почтовый сервер. Создание пользователей на внешнем почтовом сервере (по протоколу Telnet)
Лекция 8.3. Прямое взаимодействие с сервером по протоколу HTTP

opened quetion to team
Задание №17: Подготовить новый проект для нового учебного приложения

Added a new module for Mantis testing

Лекция 8.1. Установка нового учебного приложения (баг-трекер Mantis)
Лекция 8.2. Подготовка проекта для тестирования MantisBT
Задание №16: Реализовать тесты для добавления контакта в группу и удаления контакта из группы

P1:
Реализовать тесты для добавления контакта в группу и удаления контакта из группы.

Все действия выполнять через пользовательский интерфейс, а при проверках использовать информацию, загружаемую из базы данных напрямую.

Не забудьте также реализовать проверку и обеспечение предусловий.
Задание №16: Реализовать тесты для добавления контакта в группу и удаления контакта из группы

Still under implemenation
Задание №16: Реализовать тесты для добавления контакта в группу и удаления контакта из группы

Under impemetation
Лекция 7.6. Связи между объектами

Also started to work on home work.
Лекция 7.5. Отключаемые проверки UI for Groups and Contacts

verifyUI parameter Implemented only for Groups and Contacts
run from console
1. C:\Users\ademidionok\Documents\GitHub\java_pft\addressbook-web-tests>
2. gradlew -PverifyUI=true testContacts
Лекция 7.5. Отключаемые проверки UI

verifyUI parameter Implemented only for GroupModificationTest
Задание №15: Реализовать проверку данных, загружаемых из БД

Задание №15: Реализовать проверку данных, загружаемых из БД
Во всех тестах для создания, удаления, модификации групп и контактов реализовать проверки списков, загружаемых из базы данных, а не из пользовательского интерфейса.

При этом можно сравнивать больше атрибутов, в том числе те, которые не показываются в веб-интерфейсе в списках групп и контактов. Но некоторые атрибуты сравнивать достаточно сложно, например, фотографию контакта, поэтому такие сложные атрибуты можно пропустить, не включать их в сравнение.

---
Лекция 7.2. Object Relational Mapping (ORM)

Still under implementation
Лекция 6.11. Протоколирование (лог-файлы)

Лекция 6.11. Протоколирование (лог-файлы)
Задание №14: Вынести описание тестового стенда в конфигурационный файл

Реализовать загрузку информации о тестовом стенде из конфигурационного файла.

Цель -- избавиться от всех явных упоминаний в коде тестов адресов, имён, паролей, и прочих строковых данных, которые могут меняться при изменении конфигурации тестируемого приложения.

Реализовать возможность указания при запуске тестов того, какой конфигурационный файл должен использоваться, передавая эту информацию через системные свойства.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Лекция 6.10. Описание конфигурации тестового стенда

browser
user name
password
Лекция 6.9. Конфигурационные файлы для описания тестовых наборов

Implemented configuration files using Groovy in build.gradle for testng in groups and contacts.
task testGroups(type: Test) {
    useTestNG{
        suites 'src/test/resources/testng-groups.xml'
    }
}
task testContacts(type: Test) {
    useTestNG{
        suites 'src/test/resources/testng-contacts.xml'
    }
}
Лекция 6.8. Автоматическое закрытие файлов после использования

Impemented for DataProvider in GroupCreationTests and ContactAddressBookCreationTests
Implemted for writers in GroupDataGenerator and ContactAddressBookRecordDataGenerator
Задание №13: Параметризовать тесты для создания групп и контактов

Реализовать для тестов создания групп и контактов провайдеры тестовых данных, которые читают данные из файлов в формате XML или JSON (достаточно в каком-нибудь одном формате).

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Задание №12: Реализовать генераторы тестовых данных ( only ContactAddressBookCreationTests )

Реализовать генераторы тестовых данных для групп и для контактов, которые сохраняют данные в файл в формате XML или JSON (достаточно в каком-нибудь одном формате).

---
Задание №12: Реализовать генераторы тестовых данных

Реализовать генераторы тестовых данных для групп и для контактов, которые сохраняют данные в файл в формате XML или JSON (достаточно в каком-нибудь одном формате).
Лекция 6.6. Формат XML (ContactAddressBookRecordData only)
Лекция 6.5. Загрузка тестовых данных из файла (Only ContactAddressBookRecords)
Лекция 6.6. Формат XML and Лекция 6.7. Формат JSON only for groups
Лекция 6.5. Загрузка тестовых данных из файла (Group Creation only)

Лекция 6.5. Загрузка тестовых данных из файла
Лекция 6.4. Параметризация тестовых методов (with GroupData only)
Лекция 6.3. Анализ опций командой строки при запуске генератора данных ((GroupDataGenerator Only))

(GroupDataGenerator Only)
Лекция 6.1. Пути к файлам и директориям

File photo= new File("src/test/resources/stru.png"); //Лекция 6.1. Пути к файлам и директориям, only relative to the working directory becasue each program has their own working directory path and getAbsolutePath() brings the full path.
Лекция 6.1. Пути к файлам и директориям (Check why locator on photo fails)
Задание №11: Реализовать тест для проверки информации о контактах на главной странице

Impelemnted for Address Book Mail , Address Book E mails and Address Book Phones:

Реализовать тест для проверки телефонов (продемонстрировано в лекциях), почтового адреса и адресов электронной почты на главной странице приложения.

Тест должен проверять только один какой-нибудь контакт, сравнивать информацию о контакте, которая представлена на главной странице, с информацией, представленной в форме редактирования контакта.

Рекомендуется использовать метод обратных проверок.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Задание №11: Реализовать тест для проверки информации о контактах на главной странице

Impelemnted for Address Book Mail , Address Book E mails and Address Book Phones
Реализовать тест для проверки телефонов (продемонстрировано в лекциях), почтового адреса и адресов электронной почты на главной странице приложения.

Тест должен проверять только один какой-нибудь контакт, сравнивать информацию о контакте, которая представлена на главной странице, с информацией, представленной в форме редактирования контакта.

Рекомендуется использовать метод обратных проверок.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы
Лекция 5.10. Режем строки (и немного про регулярные выражения)  Phones (Home, Work, Mobile))

How to compare data from edit form and main contact page
Лекция 5.9. Способы построения сложных локаторов ContactAddressBookRecordData - Phones(Home, Mobile, Work))
Лекция 5.8. Хеширование и предварительные проверки - Address Book
Лекция 5.8. Хеширование и предварительные проверки Groups

and Лекция 5.7. Кеширование результатов длительных операций for Contact Address Records and Groups
Лекция 5.6. Hamcrest: улучшение внешнего вида проверок Address Book
Лекция 5.6. Hamcrest: улучшение внешнего вида проверок --> Group
Лекция 5.5. Повсеместное использование уникальных идентификаторов объектов Address Book

Without deletion of all methods
Лекция 5.5. Повсеместное использование уникальных идентификаторов объектов - Group
Лекция 5.4. Fluent-интерфейсы Address Book
Лекция 5.4. Fluent-интерфейсы - Group
Лекция 5.3. Улучшение названий методов

Address book only
Лекция 5.3. Улучшение названий методов
Лекция 5.2. Улучшение кода тестов: ещё немного реструктуризации кода
Задание №9: Реализовать проверки путём сравнения списков-->Improved

Improved based on comment, please confirm
Задание №9: Реализовать проверки путём сравнения списков

Реализовать проверки путём сравнения списков в тестах для создания, удаления и модификации групп и контактов.

Для контактов пока достаточно учитывать в сравнении только имя и фамилию. О том, как сравнивать телефоны и адреса электронной почты -- в следующем занятии.

В тестах для создания и модификации нужно упорядочивать списки перед сравнением.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Лекция 4.10. Сортировка списков - Q1

Please look into testContactAddressBookModification
Лекция 4.10. Сортировка списков

For ContactAddressBookRecords and Croups
Лекция 4.9. Лямбда-выражения (анонимные функции) и элементы функционального программирования

Лекция 4.9. Лямбда-выражения (анонимные функции) и элементы функционального программирования
Лекция 4.8. Поиск максимального элемента в коллекции

Completed for address records and groups
Лекция 4.7. Множества: неупорядоченные коллекции
Лекция 4.6. Сравнение коллекций
Лекция 4.5. Формирование коллекции
Лекция 4.1. Циклы: многократные повторения похожих действий
Задание №8: Реализовать проверку и обеспечение предусловий в тестах

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Задание №8: Реализовать проверку и обеспечение предусловий в тестах

Доработать тесты для удаления и модификации групп и контактов, чтобы они предварительно проверяли наличие хотя бы одного элемента, который можно удалить или модифицировать, и если такого элемента нет -- предварительно создавали его.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Лекция 3.10. Проверка и обеспечение выполнения предусловий

Лекция 3.10. Проверка и обеспечение выполнения предусловий
Лекция 3.9. "Ленивые" действия

Лекция 3.9. "Ленивые" действия
Лекция 3.6. Оптимизация заполнения форм: оставляем не изменяющися значения в полях

Лекция 3.6. Оптимизация заполнения форм: оставляем не изменяющися значения в полях
Задание №7: Научиться запускать тесты в разных браузерах

Реализовать возможность запуска тестов в разных браузерах (как минимум в двух, например, Firefox и Chrome).
Задание №5: Реализовать двухуровневую архитектуру тестового набора

Modification based on comment "Отзыв в виде комментария
Верно. Перенесите модельный класс контактов в пакет model"
1. Renamed class to the ContactAddressBookRecordData using refactoring
2. Moved above class to the Model package
Задание №6: Сделать тесты для удаления и модификации групп и контактов

Реализовать все недостающие (не реализованные в предыдущих домашних заданиях) тесты для создания, удаления и модификации групп и контактов, создавая попутно вспомогательные методы, какие потребуются.

При этом вспомогательные методы сразу добавляйте в соответствующие классы-помощники.

Для создания вспомогательных методов можно использовать рекордер, но сценарий целиком не нужно записывать, пишите сценарии вручную как последовательность обращений к вспомогательным методам.

Для закрытия диалогового окна (alert), которое появляется при удалении контакта, нужно использовать такую команду драйвера:

wd.switchTo().alert().accept();

После каждого шага проверяйте, что проект компилируется и тесты работают. Кроме того, после каждого успешного шага делайте commit в репозиторий. Если что-то сломалось, не получилось сделать какой-то шаг -- отмените изменения, вернитесь к предыдущему работающему состоянию и попробуйте ещё раз.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Задание №5: Реализовать двухуровневую архитектуру тестового набора

Сделать общий базовый класс для тестов TestBase, перенести вспомогательные методы в него (включая инициализацию и завершение)
Сделать класс ApplicationManager и перенести вспомогательные методы в него, это рекомендуется делать при помощи рефакторинга в два шага, как описано в лекции "Заменяем наследование на делегирование".
Выделить из ApplicationManager специализированные классы-помощники NavigationHelper, GroupHelper и ContactHelper, перенести в них из ApplicationManager соответствующие вспомогательные методы.
Создать для этих вспомогательных классов общий базовый класс BaseHelper, перенести в него низкоуровневые вспомогательные методы (заполнение отдельного поля, нажатие на кнопку или ссылку).
Задание №5: Реализовать двухуровневую архитектуру тестового набора

Выделить из ApplicationManager специализированные классы-помощники NavigationHelper, GroupHelper и ContactHelper, перенести в них из ApplicationManager соответствующие вспомогательные методы.
Задание №5: Реализовать двухуровневую архитектуру тестового набора

Сделать общий базовый класс для тестов TestBase, перенести вспомогательные методы в него (включая инициализацию и завершение)
Сделать класс ApplicationManager и перенести вспомогательные методы в него, это рекомендуется делать при помощи рефакторинга в два шага, как описано в лекции "Заменяем наследование на делегирование".
Задание №5: Реализовать двухуровневую архитектуру тестового набора

Сделать общий базовый класс для тестов TestBase, перенести вспомогательные методы в него (включая инициализацию и завершение)
Лекция 2.8. Создаём общий базовый класс для классов-помощников

Лекция 2.8. Создаём общий базовый класс для классов-помощников
Лекция 2.7. Выделяем специализированные классы-помощники
Задание №4:

I changed the @BeforeClass and @AfterClass to the @BeforeMethod and  @AfterMethod
Задание №4:

Задание №4: Сделать тесты для создания групп и контактов в адресной книге.
The contact named ContactAddressBookRecord
Лекция 2.4 update to ChromeDriver
Лекция 2.4.

Лекция 2.4. Рефакторинг: улучшаем читаемость кода, выделяем вспомогательные методы
Лекция 2.3. Фикстуры: инициализация и зачистка

login part moved to initializer part of fixture
Лекция 2.2 Class and Method names change
Лекция 2.2 Method name change
Лекция 2.2

Лекция 2.2. Делаем тест для веб-приложения, используя драйвер Selenium
Exercise 3 Completed, see comment below

Задание №3: Подключить тестовый фреймворк и сделать первые тесты.
Подключить к модулю sandbox тестовый фреймворк TestNG и сделать несколько тестов для класса Point, которые проверяют, что расстояние между точками вычисляется правильно.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
Modified Class point and distance calculation
Exercice 2 , Class point and distance calculation

Implemented:

Задание №2: Потренироваться использовать функции, классы, объекты и методы
1. Создать класс Point для представления точек на двумерной плоскости. Объекты этого класса должны содержать два атрибута, которые соответствуют координатам точки на плоскости.

2. Создать функцию
public static double distance(Point p1, Point p2)
которая вычисляет расстояние между двумя точками. Для вычисления квадратного корня можно использовать функцию Math.sqrt

3. Сделать запускаемый класс, то есть содержащий функцию
public static void main(String[] args) {...}
и при помощи него убедиться, что функция вычисления расстояния между точками действительно работает. Результат вычисления выводить на экран и контролировать визуально.

4. Реализовать то же самое (вычисление расстояния между двумя точками) при помощи метода в классе Point, и добавить в созданный в предыдущем пункте запускаемый класс примеры использования метода вместо ранее созданной функции.

---

После выполнения задания сохраните код в удаленный репозиторий и в качестве ответа на задание сообщите тренеру ссылку на последний коммит, а также можете написать любые дополнительные комментарии и вопросы.
added several methods
Project disconnected from GIT
Format Configuration and src
Created package for my first program
Created project IDEA
Exe file added for Gradle
Project "Sandbox"

Project sandbox been created
Initial commit
]]></system-out>
  <system-err><![CDATA[SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
]]></system-err>
</testsuite>
